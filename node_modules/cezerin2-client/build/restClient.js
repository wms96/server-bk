"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const query_string_1 = __importDefault(require("query-string"));
let RestClient = (() => {
    class RestClient {
        constructor({ baseUrl, token }) {
            this.postFormDataConfig = formData => ({
                method: "post",
                body: formData,
                headers: {
                    Authorization: `Bearer ${this.token}`,
                },
            });
            this.returnStatusAndJson = response => response
                .json()
                .then(json => ({ status: response.status, json }))
                .catch(() => ({ status: response.status, json: null }));
            this.baseUrl = baseUrl;
            this.token = token;
        }
        getConfig(method, data) {
            const config = {
                method,
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${this.token}`,
                },
            };
            if (data) {
                config.body = JSON.stringify(data);
            }
            return config;
        }
        get(endpoint, filter, cookie) {
            return cross_fetch_1.default(`${this.baseUrl}${endpoint}?${query_string_1.default.stringify(filter)}`, this.getConfig("get", null, cookie)).then(this.returnStatusAndJson);
        }
        post(endpoint, data) {
            return cross_fetch_1.default(this.baseUrl + endpoint, this.getConfig("post", data)).then(this.returnStatusAndJson);
        }
        postFormData(endpoint, formData) {
            return cross_fetch_1.default(this.baseUrl + endpoint, this.postFormDataConfig(formData)).then(this.returnStatusAndJson);
        }
        put(endpoint, data) {
            return cross_fetch_1.default(this.baseUrl + endpoint, this.getConfig("put", data)).then(this.returnStatusAndJson);
        }
        delete(endpoint) {
            return cross_fetch_1.default(this.baseUrl + endpoint, this.getConfig("delete")).then(this.returnStatusAndJson);
        }
    }
    RestClient.returnStatusAndJsonStatic = response => response
        .json()
        .then(json => ({ status: response.status, json }))
        .catch(() => ({ status: response.status, json: null }));
    return RestClient;
})();
exports.default = RestClient;
//# sourceMappingURL=restClient.js.map