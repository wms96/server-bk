"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Settings = /*#__PURE__*/function () {
  function Settings(client) {
    _classCallCheck(this, Settings);

    this.client = client;
    this.resourceUrl = "/settings";
  }

  _createClass(Settings, [{
    key: "retrieve",
    value: function retrieve() {
      return this.client.get(this.resourceUrl);
    }
  }, {
    key: "update",
    value: function update(data) {
      return this.client.put(this.resourceUrl, data);
    }
  }, {
    key: "retrieveEmailSettings",
    value: function retrieveEmailSettings() {
      return this.client.get("".concat(this.resourceUrl, "/email"));
    }
  }, {
    key: "updateEmailSettings",
    value: function updateEmailSettings(data) {
      return this.client.put("".concat(this.resourceUrl, "/email"), data);
    }
  }, {
    key: "retrieveImportSettings",
    value: function retrieveImportSettings() {
      return this.client.get("".concat(this.resourceUrl, "/import"));
    }
  }, {
    key: "updateImportSettings",
    value: function updateImportSettings(data) {
      return this.client.put("".concat(this.resourceUrl, "/import"), data);
    }
  }, {
    key: "retrieveCookieBanner",
    value: function retrieveCookieBanner(subject, body) {
      return this.client.get("".concat(this.resourceUrl, "/cookiebanner"), subject, body);
    }
  }, {
    key: "updateCookieBanner",
    value: function updateCookieBanner(subject, body) {
      return this.client.put("".concat(this.resourceUrl, "/cookiebanner"), subject, body);
    }
  }, {
    key: "retrieveEmailTemplate",
    value: function retrieveEmailTemplate(name) {
      return this.client.get("".concat(this.resourceUrl, "/email/templates/").concat(name));
    }
  }, {
    key: "updateEmailTemplate",
    value: function updateEmailTemplate(name, data) {
      return this.client.put("".concat(this.resourceUrl, "/email/templates/").concat(name), data);
    }
  }, {
    key: "uploadLogo",
    value: function uploadLogo(formData) {
      return this.client.postFormData("".concat(this.resourceUrl, "/logo"), formData);
    }
  }, {
    key: "deleteLogo",
    value: function deleteLogo() {
      return this.client.delete("".concat(this.resourceUrl, "/logo"));
    }
  }]);

  return Settings;
}();

exports.default = Settings;