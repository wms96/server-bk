"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var cross_fetch_1 = __importDefault(require("cross-fetch"));

var query_string_1 = __importDefault(require("query-string"));

var RestClient = function () {
  var RestClient = /*#__PURE__*/function () {
    function RestClient(_ref) {
      var _this = this;

      var baseUrl = _ref.baseUrl,
          token = _ref.token;

      _classCallCheck(this, RestClient);

      this.postFormDataConfig = function (formData) {
        return {
          method: "post",
          body: formData,
          headers: {
            Authorization: "Bearer ".concat(_this.token)
          }
        };
      };

      this.returnStatusAndJson = function (response) {
        return response.json().then(function (json) {
          return {
            status: response.status,
            json: json
          };
        }).catch(function () {
          return {
            status: response.status,
            json: null
          };
        });
      };

      this.baseUrl = baseUrl;
      this.token = token;
    }

    _createClass(RestClient, [{
      key: "getConfig",
      value: function getConfig(method, data) {
        var config = {
          method: method,
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer ".concat(this.token)
          }
        };

        if (data) {
          config.body = JSON.stringify(data);
        }

        return config;
      }
    }, {
      key: "get",
      value: function get(endpoint, filter, cookie) {
        return cross_fetch_1.default("".concat(this.baseUrl).concat(endpoint, "?").concat(query_string_1.default.stringify(filter)), this.getConfig("get", null, cookie)).then(this.returnStatusAndJson);
      }
    }, {
      key: "post",
      value: function post(endpoint, data) {
        return cross_fetch_1.default(this.baseUrl + endpoint, this.getConfig("post", data)).then(this.returnStatusAndJson);
      }
    }, {
      key: "postFormData",
      value: function postFormData(endpoint, formData) {
        return cross_fetch_1.default(this.baseUrl + endpoint, this.postFormDataConfig(formData)).then(this.returnStatusAndJson);
      }
    }, {
      key: "put",
      value: function put(endpoint, data) {
        return cross_fetch_1.default(this.baseUrl + endpoint, this.getConfig("put", data)).then(this.returnStatusAndJson);
      }
    }, {
      key: "delete",
      value: function _delete(endpoint) {
        return cross_fetch_1.default(this.baseUrl + endpoint, this.getConfig("delete")).then(this.returnStatusAndJson);
      }
    }]);

    return RestClient;
  }();

  RestClient.returnStatusAndJsonStatic = function (response) {
    return response.json().then(function (json) {
      return {
        status: response.status,
        json: json
      };
    }).catch(function () {
      return {
        status: response.status,
        json: null
      };
    });
  };

  return RestClient;
}();

exports.default = RestClient;